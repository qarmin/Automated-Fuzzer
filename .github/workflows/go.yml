name: üêß Go Check
on:
  #push: # Once daily
  #pull_request: # Once daily
  schedule:
    - cron: '0 21 * * *'

env:
  CARGO_TERM_COLOR: always
  TOOL_TYPE: GO

jobs:
  go-normal-ci:

    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        include:
          #          - name: LONG_1
          #            config-file: fuzz_go_settings_ci.toml
          #            timeout: 6000
          #            files: "AA_GO_VALID_FILES.7z"
          #            go_version: '1.22.0'
          #          - name: SHORT_1
          #            config-file: fuzz_go_settings_ci.toml
          #            timeout: 1800
          #            files: "AA_GO_VALID_FILES.7z"
          #            go_version: '1.22.0'
          - name: UNSTABLE_123
            config-file: fuzz_go_settings_ci.toml
            timeout: 6000
            files: "AA_GO_VALID_FILES.7z"
            go_version: '1.23.0-rc.1'

    steps:
      - uses: actions/checkout@v4

      - name: Setup rust version
        run: |
          rustup default nightly
          rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
          rustup component add llvm-tools-preview --toolchain nightly-x86_64-unknown-linux-gnu

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y wget earlyoom libasan8

      - name: Install create_broken_files and sd
        run: cargo install create_broken_files sd

      # THERE STARTING CUSTOM STEP

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go_version }}
          check-latest: true

      - name: Install go
        run: |
          git clone https://github.com/dominikh/go-tools.git gotools
          cd gotools
          go install cmd/staticcheck/staticcheck.go
          sudo cp ~/go/bin/staticcheck /usr/bin/staticcheck
          ldd /usr/bin/staticcheck
          cd ..

      # THIS SHOULD BE COMMON FOR ALL MODES ############################################################

      - name: Build
        run: cargo build --release

      - name: Create folders
        run: |
          mkdir /opt/VALID_FILES_DIR
          mkdir /opt/POSSIBLY_BROKEN_FILES_DIR
          mkdir /opt/BROKEN_FILES_DIR

      - name: Download and prepare data files
        run: |
          CURR_DIR=$(pwd)
          cd /opt/VALID_FILES_DIR
          
          python3 "$CURR_DIR/download_helper.py" "${{ matrix.files }}"
          
          cd $CURR_DIR

      - name: Run app
        run: |
          mv ${{ matrix.config-file }} fuzz_settings.toml
          sd "TMP_FOLDER_TO_REPLACE" "/tmp/tmp_folder/data" fuzz_settings.toml
          export RUST_BACKTRACE=1
          target/release/automated_fuzzer ${{ matrix.timeout }} || true

      - name: Create broken file to fail ci
        run: |
          [ "$(ls -A /opt/BROKEN_FILES_DIR)" ] && touch CI_NEEDS_TO_FAIL.txt || true

      - name: Store results before
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: FILES___${{ env.TOOL_TYPE }}___${{ matrix.name }}___before
          path: /opt/BROKEN_FILES_DIR

      - name: Remove non crashing files
        run: |
          sd "remove_non_crashing_items_from_broken_files = false" "remove_non_crashing_items_from_broken_files = true" fuzz_settings.toml
          export RUST_BACKTRACE=1
          export ASAN_SYMBOLIZER_PATH=$(which llvm-symbolizer-18)
          export ASAN_OPTIONS=symbolize=1
          target/release/automated_fuzzer

      - name: Create broken file to fail ci
        run: |
          [ "$(ls -A /opt/BROKEN_FILES_DIR)" ] && touch CI_NEEDS_TO_FAIL.txt || true
          [ "$(ls -A /tmp/tmp_folder/data)" ] && touch CI_NEEDS_TO_FAIL.txt || true

      - name: Store Reports
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: REPORTS___${{ env.TOOL_TYPE }}___${{ matrix.name }}
          path: /tmp/tmp_folder/data

      - name: Store results after
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: FILES___${{ env.TOOL_TYPE }}___${{ matrix.name }}___after
          path: /opt/BROKEN_FILES_DIR

      - name: Remove all folders
        run: |
          rm -rf /opt/VALID_FILES_DIR || true
          rm -rf /opt/POSSIBLY_BROKEN_FILES_DIR || true

      - name: Exit when found broken files
        run: |
          [ "$(ls -A /opt/BROKEN_FILES_DIR)" ] && exit 1 || true
          [ -f CI_NEEDS_TO_FAIL.txt ] && exit 1 || true
