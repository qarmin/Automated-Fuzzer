name: 🐧 Ruff Check
on:
  push:
  pull_request:
  schedule:
    - cron: '0 22 * * *'

env:
  CARGO_TERM_COLOR: always

jobs:
  ruff-normal-ci:

    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: NORMAL_1
            config-file: fuzz_ruff_settings_ci.toml
            timeout: 10000
            files: "FILES_21.zip"
          - name: NORMAL_2
            config-file: fuzz_ruff_settings_ci.toml
            timeout: 10000
            files: "FILES_22.zip"
          - name: NORMAL_3
            config-file: fuzz_ruff_settings_ci.toml
            timeout: 10000
            files: "FILES_23.zip"
          - name: SHORT_NORMAL_1
            config-file: fuzz_ruff_settings_ci.toml
            timeout: 120
            files: "FILES_25.zip"

          #          - name: RED_KNOT
          #            config-file: fuzz_rust_settings_ci_red_knot.toml
          #            timeout: 10000
          #            files: "FILES_21.zip"
          #          - name: RED_KNOT_SHORT
          #            config-file: fuzz_rust_settings_ci_red_knot.toml
          #            timeout: 1800
          #            files: "FILES_25.zip"

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y wget earlyoom libasan8

      - name: Install create_broken_files and sd
        run: cargo install create_broken_files sd

      - name: Install ruff
        if: matrix.name != 'DEBUG_1'
        run: |
          git clone https://github.com/astral-sh/ruff.git ruff
          cd ruff
          sed -i '/\[profile.release\]/a overflow-checks = true' Cargo.toml
          sed -i '/\[profile.release\]/a debug-assertions = true' Cargo.toml
          sed -i '/\[profile.release\]/a debug = true' Cargo.toml
          sd "MAX_ITERATIONS: usize = 100;" "MAX_ITERATIONS: usize = 500;" crates/ruff_linter/src/linter.rs
          rm rust-toolchain.toml
          cargo install --path crates/ruff --locked
          cargo install --path crates/red_knot/ --force --locked
          cd ..

      - name: Install ruff Debug
        if: matrix.name == 'DEBUG_1'
        run: |
          git clone https://github.com/astral-sh/ruff.git ruff
          cd ruff
          sed -i '/\[profile.release\]/a overflow-checks = true' Cargo.toml
          sd "MAX_ITERATIONS: usize = 100;" "MAX_ITERATIONS: usize = 500;" crates/ruff_linter/src/linter.rs
          rm rust-toolchain.toml
          cargo install --path crates/ruff --debug  --locked
          cd ..

      - name: Build
        run: cargo build --release

      - name: Create folders
        run: |
          mkdir /opt/VALID_FILES_DIR
          mkdir /opt/POSSIBLY_BROKEN_FILES_DIR
          mkdir /opt/BROKEN_FILES_DIR

      - name: Download and prepare python data files
        run: |
          CURR_DIR=$(pwd)
          cd /opt/VALID_FILES_DIR
          
          python3 "$CURR_DIR/download_helper.py" "${{ matrix.files }}"
          
          cd $CURR_DIR

      - name: Run app
        run: |
          mv ${{ matrix.config-file }} fuzz_settings.toml
          sd "TMP_FOLDER_TO_REPLACE" "/tmp/tmp_folder/data" fuzz_settings.toml
          target/release/automated_fuzzer ${{ matrix.timeout }} || true

      - name: Remove pycache
        run: |
          rm -rf /opt/BROKEN_FILES_DIR/__pycache__ || true

      - name: Store results
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: ${{ matrix.name }}-before
          path: /opt/BROKEN_FILES_DIR

      # Some output files can be not parsable or not broken if closed app before finish
      - name: Remove non crashing files
        run: |
          sd "remove_non_crashing_items_from_broken_files = false" "remove_non_crashing_items_from_broken_files = true" fuzz_settings.toml
          RUST_BACKTRACE=1 target/release/automated_fuzzer

      - name: Find minimal rules
        run: |
          if [ -f settings.toml.temp ]; then
            mv settings.toml.temp fuzz_settings.toml
          fi
          sd 'find_minimal_rules = false' 'find_minimal_rules = true' fuzz_settings.toml
          RUST_BACKTRACE=1 target/release/automated_fuzzer

      - name: Store Reports
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: reports-${{ matrix.name }}
          path: /tmp/tmp_folder/data

      - name: Remove pycache
        run: |
          rm -rf /opt/BROKEN_FILES_DIR/__pycache__ || true

      - name: Store results
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: ${{ matrix.name }}
          path: /opt/BROKEN_FILES_DIR

      - name: Zip and send it
        run: |
          for dir in "/opt/BROKEN_FILES_DIR" "/tmp/tmp_folder/data"; do
            if [ -d "$dir" ]; then
              #python3 send.py "${{ secrets.SECRET_KEY }}" "${{ secrets.IP_ADDRESS }}" "$dir"
              zip_file="src.zip"
              zip -q -r "$zip_file" "$dir"
              curl -X POST -H "Content-Type: multipart/form-data" -H "Authorization: ${{ secrets.SECRET_KEY }}" -F "file=@$zip_file" http://${{ secrets.IP_ADDRESS }}:2222/upload/zip > a.txt || true
              sleep 5
              curl -X POST -H "Content-Type: multipart/form-data" -H "Authorization: ${{ secrets.SECRET_KEY }}" -F "file=@$zip_file" http://${{ secrets.IP_ADDRESS }}:2222/upload/zip > a.txt || true
              sleep 5
              curl -X POST -H "Content-Type: multipart/form-data" -H "Authorization: ${{ secrets.SECRET_KEY }}" -F "file=@$zip_file" http://${{ secrets.IP_ADDRESS }}:2222/upload/zip > a.txt || true
              sleep 5
            fi
          done

      - name: Remove all folders
        run: |
          rm -rf /opt/VALID_FILES_DIR || true
          rm -rf /opt/POSSIBLY_BROKEN_FILES_DIR || true

      - name: Exit when found broken files
        run: |
          [ "$(ls -A /opt/BROKEN_FILES_DIR)" ] && exit 1 || true

