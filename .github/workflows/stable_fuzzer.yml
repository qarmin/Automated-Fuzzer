# This job contains fuzzers, that won't found any bugs recently, so they don't need to be checked so often
name: 🐧 Stable Fuzzer Check
on:
  #  push: # Once daily
  #  pull_request: # Once daily
  schedule:
    - cron: '0 21 * * 1'

env:
  CARGO_TERM_COLOR: always
  SANITIZER: true

jobs:
  automated-ci:

    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: DICOM
            config-file: fuzz_dicom_rs_settings_ci.toml
            timeout: 3600
            files: "AA_DCM_VALID_FILES.7z"
            library_folder: dicom
            stability_check: false
            binary: dicom
          - name: PDF_RS
            config-file: fuzz_pdf_rs_settings_ci.toml
            timeout: 3600
            files: "AA_PDF_VALID_FILES2.7z"
            library_folder: pdf_rs
            stability_check: false
            binary: pdf_rs
          - name: TTF_PARSER
            config-file: fuzz_ttf_parser_settings_ci.toml
            timeout: 3600
            files: "AA_FONT_VALID_FILES_MORE.7z"
            library_folder: ttf_parser
            stability_check: false
            binary: ttf_parser
          - name: ZIP_RS
            config-file: fuzz_zip_rs_settings_ci.toml
            timeout: 3600
            files: "AA_ZIP_VALID_FILES.7z"
            library_folder: zip_rs
            stability_check: false
            binary: zip_rs
          #          - name: GO
          #            config-file: fuzz_go_settings_ci.toml
          #            timeout: 3600
          #            files: "AA_GO_VALID_FILES.7z"
          #            go_version: '1.23.0-rc.1'
          #            library_folder: ''
          #            stability_check: false
          #            binary: staticcheck
          - name: TYPST
            config-file: fuzz_typst_settings_ci.toml
            timeout: 3600
            files: "AA_TYPST_VALID_FILES.zip"
            library_folder: ''
            stability_check: false
            binary: typst
          - name: IMAGE
            config-file: fuzz_image_settings_ci.toml
            timeout: 3600
            files: "AA_IMAGE_VALID_FILES.7z"
            library_folder: image
            stability_check: false
            binary: image
          - name: IMAGE_HASHER
            config-file: fuzz_image_hasher_settings_ci.toml
            timeout: 3600
            files: "AA_IMAGE_VALID_FILES.7z"
            library_folder: image_hasher
            stability_check: false
            binary: image_hasher
          - name: FAST_IMAGE_RESIZER
            config-file: fuzz_fast_image_resizer_settings_ci.toml
            timeout: 3600
            files: "AA_IMAGE_VALID_FILES.7z"
            library_folder: fast_image_resizer
            stability_check: false
            binary: fast_image_resizer
          - name: NOM_EXIF
            config-file: fuzz_nom_exif_settings_ci.toml
            timeout: 3600
            files: "AA_NOM_EXIF_VALID_FILES.7z"
            library_folder: nom_exif
            stability_check: false
            binary: nom_exif
          - name: LOFTY
            config-file: fuzz_lofty_settings_ci.toml
            timeout: 3600
            files: "AA_MUSIC_VALID_FILES.7z"
            library_folder: lofty
            stability_check: false
            binary: lofty
          - name: SLINT
            config-file: fuzz_slint_settings_ci.toml
            timeout: 3600
            files: "AA_SLINT_FILES.7z"
            library_folder: slint
            stability_check: false
            binary: slint
          - name: LOPDF
            config-file: fuzz_lopdf_settings_ci.toml
            timeout: 3600
            files: "AA_PDF_VALID_FILES2.7z"
            library_folder: lopdf
            stability_check: false
            binary: lopdf
          - name: VIDDUPLICATE
            config-file: fuzz_vidduplicate_settings_ci.toml
            timeout: 3600
            files: "AA_VIDEO_VALID_FILES.7z"
            library_folder: vidduplicate
            stability_check: false
            binary: vidduplicate

    steps:
      - uses: actions/checkout@v4

      - name: Setup rust version
        run: |
          rustup default nightly
          rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
          rustup component add llvm-tools-preview --toolchain nightly-x86_64-unknown-linux-gnu

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y wget earlyoom libasan8 llvm sd
          sudo apt install -y pkg-config libfreetype6-dev libfontconfig1-dev # For font_kit

      - name: Install create_broken_files and
        run: cargo install create_broken_files minimizer

      # THERE STARTING CUSTOM STEP
      - name: Install apps, which are inside this repo(probably only libraries)
        if: ${{ matrix.library_folder != '' }}
        run: |
          cd src/crates/${{ matrix.library_folder }}
          cargo update
          
          if [ "${{ env.SANITIZER }}" = "true" ]; then
            echo "ASAN BUILD___"
            RUSTFLAGS="-Zsanitizer=address" cargo +nightly install --path . --locked --target x86_64-unknown-linux-gnu
          else
            echo "NORMAL BUILD___"
            cargo install --path . --locked
          fi
          
          cd ../../..
          ldd $(whereis -b ${{ matrix.library_folder }} | awk '{print $2}')

      #### GO
      - uses: actions/setup-go@v5
        if: ${{ contains(matrix.name, 'GO') }}
        with:
          go-version: ${{ matrix.go_version }}
          check-latest: true

      - name: Install go
        if: ${{ contains(matrix.name, 'GO') }}
        run: |
          git clone https://github.com/dominikh/go-tools.git gotools
          cd gotools
          go install cmd/staticcheck/staticcheck.go
          sudo cp ~/go/bin/staticcheck /usr/bin/staticcheck
          ldd /usr/bin/staticcheck
          cd ..

      #### BIOME
      - name: Install biome
        if: ${{ contains(matrix.name, 'BIOME') }}
        run: |
          wget -q https://github.com/biomejs/biome/archive/refs/heads/main.zip
          unzip -q main.zip
          rm main.zip
          cd biome-main
          rm rust-toolchain.toml
          echo "[profile.release]" >> Cargo.toml
          echo "overflow-checks = true" >> Cargo.toml
          echo "debug = true" >> Cargo.toml
          echo "panic = 'abort'" >> Cargo.toml
          rm -rf .cargo # Removes lto = true
          
          if [ "${{ env.SANITIZER }}" = "true" ]; then
            echo "ASAN BUILD___"
            RUSTFLAGS="-Zsanitizer=address" cargo +nightly install --path crates/biome_cli --locked --target x86_64-unknown-linux-gnu
          else
            echo "NORMAL BUILD___"
            cargo install --path crates/biome_cli --locked
          fi
          
          cd ../
          rm -rf biome-main
          ldd $(whereis -b biome | awk '{print $2}')

      #### OXLINT
      - name: Install oxlint
        if: ${{ contains(matrix.name, 'OXC') }}
        run: |
          wget -q https://github.com/oxc-project/oxc/archive/refs/heads/main.zip
          unzip -q main.zip
          rm main.zip
          cd oxc-main
          rm rust-toolchain.toml
          sd "codegen-units = 1" "overflow-checks = true" Cargo.toml
          sd "debug = false" "debug = true" Cargo.toml
          sd "strip = \"symbols\"" "strip = \"none\"" Cargo.toml
          sd "lto =" "#lto =" Cargo.toml
          
          if [ "${{ env.SANITIZER }}" = "true" ]; then
            echo "ASAN BUILD___"
            RUSTFLAGS="-Zsanitizer=address" cargo +nightly install --path apps/oxlint --locked --target x86_64-unknown-linux-gnu
          else
            echo "NORMAL BUILD___"
            cargo install --path apps/oxlint --locked
          fi
          
          cd ../
          rm -rf oxc-main
          ldd $(whereis -b oxlint | awk '{print $2}')

      #### PYREFLY
      - name: Install pyrefly
        if: ${{ contains(matrix.name, 'PYREFLY') }}
        run: |
          wget -q https://github.com/facebook/pyrefly/archive/refs/heads/main.zip
          unzip -q main.zip
          rm main.zip
          cd pyrefly-main
          rm rust-toolchain.toml
          sd "lto =" "#lto =" Cargo.toml
          sd "codegen-units = 1" "#codegen-units = 1" Cargo.toml
          sed -i '/\[profile.release\]/a overflow-checks = true' Cargo.toml
          sed -i '/\[profile.release\]/a debug = true' Cargo.toml
          sed -i '/\[profile.release\]/a debug-assertions = true' Cargo.toml
          
          if [ "${{ env.SANITIZER }}" = "true" ]; then
            echo "ASAN BUILD___"
            RUSTFLAGS="-Zsanitizer=address" cargo +nightly install --path pyrefly --locked --target x86_64-unknown-linux-gnu
          else
            echo "NORMAL BUILD___"
            cargo install --path pyrefly --locked
          fi
          
          cd ../
          rm -rf pyrefly-main
          ldd $(whereis -b pyrefly | awk '{print $2}')

      #### TY
      - name: Install TY(ruff) - special name, because ty may conflict with other binaries
        if: ${{ contains(matrix.name, 'TYRUF') }}
        run: |
          wget -q https://github.com/astral-sh/ruff/archive/refs/heads/main.zip
          unzip -q main.zip
          rm main.zip
          cd ruff-main
          rm rust-toolchain.toml
          sd "lto =" "#lto =" Cargo.toml
          sd "codegen-units = 1" "#codegen-units = 1" Cargo.toml
          sed -i '/\[profile.release\]/a overflow-checks = true' Cargo.toml
          sed -i '/\[profile.release\]/a debug = true' Cargo.toml
          sed -i '/\[profile.release\]/a debug-assertions = true' Cargo.toml
          
          if [ "${{ env.SANITIZER }}" = "true" ]; then
            echo "ASAN BUILD___"
            RUSTFLAGS="-Zsanitizer=address" cargo +nightly install --path crates/ty --locked --target x86_64-unknown-linux-gnu
          else
            echo "NORMAL BUILD___"
            cargo install --path crates/ty --locked
          fi
          
          cd ../
          rm -rf ruff-main
          ldd $(whereis -b ty | awk '{print $2}')

      #### SWC
      - name: Install swc
        if: ${{ contains(matrix.name, 'SWC') }}
        run: |
          wget -q https://github.com/swc-project/swc/archive/refs/heads/main.zip
          unzip -q main.zip
          
          if [ "${{ matrix.asan_build }}" = "true" ]; then
            echo "ASAN BUILD___"
            RUSTFLAGS="-Zsanitizer=address" cargo +nightly install --path swc-main/crates/swc_cli_impl/ --locked  --target x86_64-unknown-linux-gnu
          else
            echo "NORMAL BUILD___"
            cargo install --path swc-main/crates/swc_cli_impl/ --locked
          fi

          rm -rf main.zip swc-main
          ldd $(whereis -b swc | awk '{print $2}')

      #### TYPST
      - name: Install typst_rs
        if: ${{ contains(matrix.name, 'TYPST') }}
        run: |
          wget -q https://github.com/typst/typst/archive/refs/heads/main.zip
          unzip -q main.zip
          rm main.zip
          cd typst-main
          sed -i '/\[profile.release\]/a overflow-checks = true' Cargo.toml
          sed -i '/\[profile.release\]/a debug-assertions = true' Cargo.toml
          sed -i '/\[profile.release\]/a debug = true' Cargo.toml
          cd crates/typst-cli
          
          if [ "${{ matrix.asan_build }}" = "true" ]; then
            echo "ASAN BUILD___"
            RUSTFLAGS="-Zsanitizer=address" cargo +nightly install --path . --locked --target x86_64-unknown-linux-gnu
          else
            echo "NORMAL BUILD___"
            cargo install --path . --locked
          fi
          
          cd ../../..
          ldd $(whereis -b typst | awk '{print $2}')

      # THIS SHOULD BE COMMON FOR ALL MODES ############################################################

      - name: Build
        run: cargo build --release

      - name: Create folders
        run: |
          mkdir /opt/VALID_FILES_DIR
          mkdir /opt/POSSIBLY_BROKEN_FILES_DIR
          mkdir /opt/BROKEN_FILES_DIR

      - name: Download and prepare data files
        run: |
          CURR_DIR=$(pwd)
          cd /opt/VALID_FILES_DIR
          
          python3 "$CURR_DIR/download_helper.py" "${{ matrix.files }}"
          
          cd $CURR_DIR

      - name: Run app
        run: |
          mv ${{ matrix.config-file }} fuzz_settings.toml
          sd "TMP_FOLDER_TO_REPLACE" "/tmp/tmp_folder/data" fuzz_settings.toml

          if [ "${{ matrix.stability_check }}" = "true" ]; then
            sd "check_for_stability = false" "check_for_stability = true" fuzz_settings.toml
          fi

          export RUST_BACKTRACE=1
          target/release/automated_fuzzer ${{ matrix.timeout }}

      - name: Create broken file to fail ci
        run: |
          [ "$(ls -A /opt/BROKEN_FILES_DIR)" ] && touch CI_NEEDS_TO_FAIL.txt || true

      - name: Store results before
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: FILES___${{ matrix.name }}___before
          path: /opt/BROKEN_FILES_DIR

      - name: Remove non crashing files
        if: ${{ matrix.stability_check == false }}
        run: |
          sd "remove_non_crashing_items_from_broken_files = false" "remove_non_crashing_items_from_broken_files = true" fuzz_settings.toml

          export RUST_BACKTRACE=1
          export ASAN_SYMBOLIZER_PATH=$(which llvm-symbolizer-18)
          export ASAN_OPTIONS=symbolize=1
          target/release/automated_fuzzer

      - name: Create broken file to fail ci
        run: |
          [ "$(ls -A /opt/BROKEN_FILES_DIR)" ] && touch CI_NEEDS_TO_FAIL.txt || true
          [ "$(ls -A /tmp/tmp_folder/data)" ] && touch CI_NEEDS_TO_FAIL.txt || true

      - name: Store Reports
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: REPORTS___${{ matrix.name }}
          path: /tmp/tmp_folder/data

      - name: Store results after
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: FILES___${{ matrix.name }}___after
          path: /opt/BROKEN_FILES_DIR

      - name: Remove all folders
        run: |
          rm -rf /opt/VALID_FILES_DIR || true
          rm -rf /opt/POSSIBLY_BROKEN_FILES_DIR || true

      - name: Pack files
        run: |
          echo "Path to binary: $(whereis -b ${{ matrix.binary }} | awk '{print $2}')"
          time 7z a "${{ matrix.binary }}.7z" "$(whereis -b ${{ matrix.binary }} | awk '{print $2}')"
          ls -al

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "Nightly"
          files: |
            ${{ matrix.binary }}.7z
          token: ${{ secrets.PAT2 }}

      - name: Exit when found broken files
        run: |
          [ "$(ls -A /opt/BROKEN_FILES_DIR)" ] && exit 1 || true
          [ -f CI_NEEDS_TO_FAIL.txt ] && exit 1 || true
