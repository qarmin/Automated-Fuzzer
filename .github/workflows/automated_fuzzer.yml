name: 🐧 Automated Fuzzer Check
on:
  push: # Once daily
  pull_request: # Once daily
  schedule:
    - cron: '0 21 * * *'

env:
  CARGO_TERM_COLOR: always
  SANITIZER: true

jobs:
  automated-ci:

    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        include:
          #          - name: Hayro
          #            config-file: fuzz_hayro_settings_ci.toml
          #            timeout: 16000
          #            files: "AA_PDF_VALID_FILES2.7z"
          #            library_folder: hayro
          #            stability_check: false
          #            binary: hayro
          #          - name: TYRUF
          #            config-file: fuzz_ty_settings_ci.toml
          #            timeout: 16000
          #            files: "FILES_21.zip"
          #            library_folder: ''
          #            stability_check: false
          #            binary: ty
          #          - name: PYREFLY
          #            config-file: fuzz_pyrefly_settings_ci.toml
          #            timeout: 16000
          #            files: "FILES_23.zip"
          #            library_folder: ''
          #            stability_check: false
          #            binary: pyrefly
          #          - name: BIOME
          #            config-file: fuzz_biome_settings_ci.toml
          #            timeout: 5000 #16000 # TODO - compilation takes ~2 hours, regression
          #            files: "AA_JS_TS_VUE_SVELTE_VALID_FILES.7z"
          #            library_folder: ''
          #            stability_check: false
          #            binary: biome
          - name: MOXCMS
            config-file: fuzz_biome_settings_ci.toml
            timeout: 1000
            files: "AA_ICC_VALID_FILES.7z"
            library_folder: ''
            stability_check: false
            binary: moxcms
          - name: MOXCMS2
            config-file: fuzz_biome_settings_ci.toml
            timeout: 1000
            files: "AA_ICC_VALID_FILES.7z"
            library_folder: ''
            stability_check: false
            binary: moxcms
          - name: MOXCMS3
            config-file: fuzz_biome_settings_ci.toml
            timeout: 4000
            files: "AA_ICC_VALID_FILES.7z"
            library_folder: ''
            stability_check: false
            binary: moxcms
          - name: MOXCMS4
            config-file: fuzz_biome_settings_ci.toml
            timeout: 8000
            files: "AA_ICC_VALID_FILES.7z"
            library_folder: ''
            stability_check: false
            binary: moxcms
          - name: ZUNE
            config-file: fuzz_zune_settings_ci.toml
            timeout: 3600
            files: "AA_IMAGE_VALID_FILES.7z"
            library_folder: zune
            stability_check: false
            binary: zune
          - name: ZUNE2
            config-file: fuzz_zune_settings_ci.toml
            timeout: 7200
            files: "AA_IMAGE_VALID_FILES.7z"
            library_folder: zune
            stability_check: false
            binary: zune
          - name: ZUNE3
            config-file: fuzz_zune_settings_ci.toml
            timeout: 16000
            files: "AA_IMAGE_VALID_FILES.7z"
            library_folder: zune
            stability_check: false
            binary: zune
          - name: ZUNE4
            config-file: fuzz_zune_settings_ci.toml
            timeout: 16000
            files: "AA_IMAGE_VALID_FILES.7z"
            library_folder: zune
            stability_check: false
            binary: zune
          - name: ZUNE5
            config-file: fuzz_zune_settings_ci.toml
            timeout: 16000
            files: "AA_IMAGE_VALID_FILES.7z"
            library_folder: zune
            stability_check: false
            binary: zune
          #          - name: SYMPHONIA
          #            config-file: fuzz_symphonia_settings_ci.toml
          #            timeout: 16000
          #            files: "AA_MUSIC_VALID_FILES.7z"
          #            library_folder: symphonia
          #            stability_check: false
          #            binary: symphonia
          #          - name: GDSCRIPT
          #            config-file: fuzz_gdscript_formatter_settings_ci.toml
          #            timeout: 16000
          #            files: "AA_GDSCRIPT_VALID_FILES.7z"
          #            library_folder: ''
          #            stability_check: false
          #            binary: gdscript-formatter
          #          - name: GDSCRIPT_LINTER1
          #            config-file: fuzz_gdscript_formatter_linter_settings_ci.toml
          #            timeout: 16000
          #            files: "AA_GDSCRIPT_VALID_FILES.7z"
          #            library_folder: ''
          #            stability_check: false
          #            binary: gdscript-formatter
          #          - name: SWC
          #            config-file: fuzz_swc_settings_ci.toml
          #            timeout: 16000
          #            files: "AA_JAVASCRIPT_VALID_FILES.7z"
          #            library_folder: ''
          #            stability_check: false
          #            binary: swc
          #          - name: SafePdf
          #            config-file: fuzz_safe_pdf_settings_ci.toml
          #            timeout: 16000
          #            files: "AA_PDF_VALID_FILES2.7z"
          #            library_folder: safe_pdf
          #            stability_check: false
          #            binary: safe_pdf
          #          - name: LOPDF
          #            config-file: fuzz_lopdf_settings_ci.toml
          #            timeout: 16000
          #            files: "AA_PDF_VALID_FILES2.7z"
          #            library_folder: lopdf
          #            stability_check: false
          #            binary: lopdf
          #          - name: RUSTPYTHON
          #            config-file: fuzz_rustpython_settings_ci.toml
          #            timeout: 1000
          #            files: "FILES_23.zip"
          #            library_folder: ''
          #            stability_check: false
          #            binary: rustpython
          #          - name: BOA
          #            config-file: fuzz_boa_settings_ci.toml
          #            timeout: 16000
          #            files: "AA_JS_TS_VUE_SVELTE_VALID_FILES.7z"
          #            library_folder: boa
          #            stability_check: false
          #            binary: boa
          # TODO - too many issues
          #          - name: Resvg
          #            config-file: fuzz_resvg_settings_ci.toml
          #            timeout: 16000
          #            files: "AA_SVG_VALID_FILES.7z"
          #            library_folder: resvg
          #            stability_check: false
          #            binary: resvg
          # https://github.com/jrmuizel/pdf-extract/issues/96
          #          - name: PDF_EXTRACT
          #            config-file: fuzz_pdf_extract_settings_ci.toml
          #            timeout: 16000
          #            files: "AA_PDF_VALID_FILES2.7z"
          #            library_folder: pdf_extract
          #            stability_check: false
          #            binary: pdf_extract
          #          - name: RSBUZZ
          #            config-file: fuzz_rsbuzz_settings_ci.toml
          #            timeout: 16000
          #            files: "AA_FONT_VALID_FILES_MORE.7z"
          #            library_folder: rsbuzz
          #            stability_check: false
          #            binary: rsbuzz

    steps:
      - uses: actions/checkout@v4

      - name: Setup rust version
        run: |
          rustup default nightly
          rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
          rustup component add llvm-tools-preview --toolchain nightly-x86_64-unknown-linux-gnu

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y wget earlyoom libasan8 llvm sd python3
          # sudo apt install -y pkg-config libfreetype6-dev libfontconfig1-dev # For font_kit

      - name: Install create_broken_files
        run: cargo install create_broken_files minimizer

      # THERE STARTING CUSTOM STEP
      - name: Install libraries, which are inside this repo(inside repo are binaries which uses these libraries)
        if: ${{ matrix.library_folder != '' }}
        run: |
          PROJECT_INSTALL_DIR="src/crates/${{ matrix.library_folder }}"
          cd $PROJECT_INSTALL_DIR
          cargo update
          cd ../../..
          echo PROJECT_INSTALL_DIR=$PROJECT_INSTALL_DIR >> $GITHUB_ENV

      #################### START OF APPLICATION STEPS ####################
      # BIOME
      - name: Download biome
        if: ${{ contains(matrix.name, 'BIOME') }}
        run: |
          wget -q https://github.com/biomejs/biome/archive/refs/heads/main.zip
          unzip -q main.zip
          rm main.zip
          echo PROJECT_INSTALL_DIR=biome-main/crates/biome_cli >> $GITHUB_ENV
          echo PROJECT_CARGO_TOML_FOLDER=biome-main >> $GITHUB_ENV

      #### PYREFLY
      - name: Install pyrefly
        if: ${{ contains(matrix.name, 'PYREFLY') }}
        run: |
          wget -q https://github.com/facebook/pyrefly/archive/refs/heads/main.zip
          unzip -q main.zip
          rm main.zip
          echo PROJECT_INSTALL_DIR=pyrefly-main/pyrefly >> $GITHUB_ENV
          echo PROJECT_CARGO_TOML_FOLDER=pyrefly-main >> $GITHUB_ENV

      #### TY
      - name: Install TY(ruff) - special name, because ty may conflict with other binaries
        if: ${{ contains(matrix.name, 'TYRUF') }}
        run: |
          wget -q https://github.com/astral-sh/ruff/archive/refs/heads/main.zip
          unzip -q main.zip
          rm main.zip
          sd -F "std::mem::forget(db);" "//std::mem::forget(db);" ruff-main/crates/ty/src/lib.rs
          echo PROJECT_INSTALL_DIR=ruff-main/crates/ty >> $GITHUB_ENV
          echo PROJECT_CARGO_TOML_FOLDER=ruff-main >> $GITHUB_ENV

      #### RUFF
      - name: Install ruff
        if: ${{ contains(matrix.name, 'RUFF') }}
        run: |
          wget -q https://github.com/astral-sh/ruff/archive/refs/heads/main.zip
          unzip -q main.zip
          rm main.zip
          echo PROJECT_INSTALL_DIR=ruff-main/crates/ruff >> $GITHUB_ENV
          echo PROJECT_CARGO_TOML_FOLDER=ruff-main >> $GITHUB_ENV

      #### GDSCRIPT
      - name: Install gdscript-formatter
        if: ${{ contains(matrix.name, 'GDSCRIPT') }}
        run: |
          # TODO why this not works?
          #          wget -q https://github.com/GDQuest/GDScript-formatter/archive/refs/heads/main.zip
          #          unzip -q main.zip
          #          rm main.zip
          sudo apt update && sudo apt install -y git
          git clone https://github.com/GDQuest/GDScript-formatter.git GDScript-formatter-main
          
          echo PROJECT_INSTALL_DIR=GDScript-formatter-main >> $GITHUB_ENV
          echo PROJECT_CARGO_TOML_FOLDER=GDScript-formatter-main >> $GITHUB_ENV

      #### SWC
      - name: Install swc
        if: ${{ contains(matrix.name, 'SWC') }}
        run: |
          wget -q https://github.com/swc-project/swc/archive/refs/heads/main.zip
          unzip -q main.zip
          rm main.zip
          echo PROJECT_INSTALL_DIR=swc-main/crates/swc_cli_impl >> $GITHUB_ENV
          echo PROJECT_CARGO_TOML_FOLDER=swc-main >> $GITHUB_ENV

      #### TYPST
      - name: Install typst_rs
        if: ${{ contains(matrix.name, 'TYPST') }}
        run: |
          wget -q https://github.com/typst/typst/archive/refs/heads/main.zip
          unzip -q main.zip
          rm main.zip
          echo PROJECT_INSTALL_DIR=typst-main/crates/typst-cli >> $GITHUB_ENV
          echo PROJECT_CARGO_TOML_FOLDER=typst-main >> $GITHUB_ENV

      #### RUSTPYTHON
      - name: Install rust_python
        if: ${{ contains(matrix.name, 'RUSTPYTHON') }}
        run: |
          wget -q https://github.com/RustPython/RustPython/archive/refs/heads/main.zip
          unzip -q main.zip
          rm main.zip
          echo PROJECT_INSTALL_DIR=RustPython-main >> $GITHUB_ENV
          echo PROJECT_CARGO_TOML_FOLDER=RustPython-main >> $GITHUB_ENV
          echo FEATURES="--features encodings" >> $GITHUB_ENV

      #################### END OF APPLICATION STEPS ####################

      - name: Remove rust_toolchain.toml files and .cargo folders
        run: |
          find . -name "rust-toolchain.toml" -exec rm -f {} \; || true
          find . -name ".cargo" -exec rm -rf {} \; || true

      - name: Apply Release patch
        run: |
          ls -alh
          
          # If PROJECT_CARGO_TOML_FOLDER exists and is not empty, then use it
          if [ -n "${{ env.PROJECT_CARGO_TOML_FOLDER }}" ]; then
              sed -i '/^\[profile\.release\]/,/^\[.*\]/ { /^\[profile\.release\]/d; /^\[.*\]/!d; }' "${{ env.PROJECT_CARGO_TOML_FOLDER }}/Cargo.toml"
      
              echo "Using PROJECT_CARGO_TOML_FOLDER: ${{ env.PROJECT_CARGO_TOML_FOLDER }}"
              echo "[profile.release]" >> "${{ env.PROJECT_CARGO_TOML_FOLDER }}/Cargo.toml"
              echo "overflow-checks = true" >> "${{ env.PROJECT_CARGO_TOML_FOLDER }}/Cargo.toml"
              echo "debug = true" >> "${{ env.PROJECT_CARGO_TOML_FOLDER }}/Cargo.toml"
              # echo "panic = 'abort'" >> "${{ env.PROJECT_CARGO_TOML_FOLDER }}/Cargo.toml"
              echo "debug-assertions = true" >> "${{ env.PROJECT_CARGO_TOML_FOLDER }}/Cargo.toml"
              echo "lto = \"fat\"" >> "${{ env.PROJECT_CARGO_TOML_FOLDER }}/Cargo.toml"
              echo "codegen-units = 1" >> "${{ env.PROJECT_CARGO_TOML_FOLDER }}/Cargo.toml"
          else
              echo "Using default Cargo.toml"
          fi

      - name: Compile apps
        run: |
          # First compile app in normal mode
          echo "Compiling in normal mode"
          if [ -n "${{ env.FEATURES }}" ]; then
            cargo +nightly install --path "${{ env.PROJECT_INSTALL_DIR }}" --locked ${{ env.FEATURES }} --target x86_64-unknown-linux-gnu
          else
            cargo +nightly install --path "${{ env.PROJECT_INSTALL_DIR }}" --locked --target x86_64-unknown-linux-gnu
          fi
          sudo cp "$(whereis -b ${{ matrix.binary }} | awk '{print $2}')" /etc/${{ matrix.binary }}_normal
          sudo cp "$(whereis -b ${{ matrix.binary }} | awk '{print $2}')" /usr/bin/${{ matrix.binary }}_normal # Additional step, to not shadow it with ASAN version
          ldd /etc/${{ matrix.binary }}_normal
          
          # Then compile app in ASAN mode
          echo "Compiling in ASAN mode"
          if [ -n "${{ env.FEATURES }}" ]; then
            RUSTFLAGS="-Zsanitizer=address" cargo +nightly install --path "${{ env.PROJECT_INSTALL_DIR }}" --locked ${{ env.FEATURES }} --target x86_64-unknown-linux-gnu
          else
            RUSTFLAGS="-Zsanitizer=address" cargo +nightly install --path "${{ env.PROJECT_INSTALL_DIR }}" --locked --target x86_64-unknown-linux-gnu
          fi
          sudo cp "$(whereis -b ${{ matrix.binary }} | awk '{print $2}')" /etc/${{ matrix.binary }}
          ldd /etc/${{ matrix.binary }}

      - name: Remove all target/compilation folders and files
        run: |
          git clean -xqdf

      - name: Pack files
        run: |
          echo "Path to normal binary: /etc/${{ matrix.binary }}_normal"
          time 7z a "${{ matrix.binary }}_normal.7z" "/etc/${{ matrix.binary }}_normal"
          
          echo "Path to asan binary: /etc/${{ matrix.binary }}"
          time 7z a "${{ matrix.binary }}.7z" "/etc/${{ matrix.binary }}"
          ls -al

      - name: Release
        if: ${{ !endsWith(matrix.name, '1') && !endsWith(matrix.name, '2') && !endsWith(matrix.name, '3') && !endsWith(matrix.name, '4') && !endsWith(matrix.name, '5') && !endsWith(matrix.name, '6') && !endsWith(matrix.name, '7') && !endsWith(matrix.name, '8') && !endsWith(matrix.name, '9') && !endsWith(matrix.name, '0') }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "Nightly"
          files: |
            ${{ matrix.binary }}.7z
            ${{ matrix.binary }}_normal.7z
          token: ${{ secrets.PAT2 }}

      - name: Install fuzzer
        run: cargo install --path .

      - name: Create folders
        run: |
          mkdir /opt/VALID_FILES_DIR
          mkdir /opt/POSSIBLY_BROKEN_FILES_DIR
          mkdir /opt/BROKEN_FILES_DIR

      - name: Download and prepare data files
        run: |
          CURR_DIR=$(pwd)
          cd /opt/VALID_FILES_DIR
          
          python3 "$CURR_DIR/download_helper.py" "${{ matrix.files }}"
          
          cd $CURR_DIR

      - name: Run app
        run: |
          mv ${{ matrix.config-file }} fuzz_settings.toml
          sd "TMP_FOLDER_TO_REPLACE" "/tmp/tmp_folder/data" fuzz_settings.toml

          if [ "${{ matrix.stability_check }}" = "true" ]; then
            sd "check_for_stability = false" "check_for_stability = true" fuzz_settings.toml
          fi

          export RUST_BACKTRACE=1
          # export ASAN_OPTIONS="detect_leaks=0" # TODO - ty leaks memory
          automated_fuzzer ${{ matrix.timeout }}

      - name: Create broken file to fail ci
        run: |
          [ "$(ls -A /opt/BROKEN_FILES_DIR)" ] && touch CI_NEEDS_TO_FAIL.txt || true

      - name: Store results before
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: FILES___${{ matrix.name }}___before
          path: /opt/BROKEN_FILES_DIR

      - name: Remove non crashing files
        if: ${{ matrix.stability_check == false }}
        run: |
          sd "remove_non_crashing_items_from_broken_files = false" "remove_non_crashing_items_from_broken_files = true" fuzz_settings.toml

          export RUST_BACKTRACE=1
          export ASAN_SYMBOLIZER_PATH=$(which llvm-symbolizer-18)
          export ASAN_OPTIONS="symbolize=1"
          automated_fuzzer

      - name: Create broken file to fail ci
        run: |
          [ "$(ls -A /opt/BROKEN_FILES_DIR)" ] && touch CI_NEEDS_TO_FAIL.txt || true
          [ "$(ls -A /tmp/tmp_folder/data)" ] && touch CI_NEEDS_TO_FAIL.txt || true

      - name: Store Reports
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: REPORTS___${{ matrix.name }}
          path: /tmp/tmp_folder/data

      - name: Store results after
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: FILES___${{ matrix.name }}___after
          path: /opt/BROKEN_FILES_DIR

      - name: Store custom
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: CUSTOM___${{ matrix.name }}
          path: /opt/CUSTOM

      - name: Remove all folders
        run: |
          rm -rf /opt/VALID_FILES_DIR || true
          rm -rf /opt/POSSIBLY_BROKEN_FILES_DIR || true

      - name: Exit when found broken files
        run: |
          [ "$(ls -A /opt/BROKEN_FILES_DIR)" ] && exit 1 || true
          [ -f CI_NEEDS_TO_FAIL.txt ] && exit 1 || true
          [ "$(ls -A /opt/CUSTOM)" ] && exit 1 || true
