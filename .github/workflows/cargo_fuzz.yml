name: üêß Cargo Fuzz Check
on:
  push:
  pull_request:
  schedule:
    - cron: '0 21 * * *'

env:
  CARGO_TERM_COLOR: always

jobs:
  cargo-check-ci:

    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        include:
          #          - name: LOFTY # Broken yet
          #            fuzz_target: lofty
          #            timeout: 14400
          #            files: "AA_MUSIC_VALID_FILES.7z"
          - name: DICOM
            fuzz_target: dicom
            timeout: 14400
            files: "AA_DCM_VALID_FILES.7z"
          #          - name: FONT_KIT # https://github.com/servo/font-kit/issues/250
          #            fuzz_target: font_kit
          #            timeout: 14400
          #            files: "AA_FONT_VALID_FILES_MORE.7z"
          #          - name: FULL_MOON
          #            fuzz_target: full_moon
          #            timeout: 14400
          #            files: "AA_LUA_VALID_FILES.7z"
          - name: IMAGE
            fuzz_target: image
            timeout: 14400
            files: "AA_IMAGE_VALID_FILES.7z"
          - name: LOPDF
            fuzz_target: lopdf
            timeout: 14400
            files: "AA_PDF_VALID_FILES.7z"
          #          - name: PDF_RS # TODO - not implemented - not know how to load from memory
          #            fuzz_target: pdf_rs
          #            timeout: 14400
          #            files: "AA_PDF_VALID_FILES.7z"
          #          - name: RSBUZZ
          #            fuzz_target: rsbuzz
          #            timeout: 14400
          #            files: "AA_FONT_VALID_FILES_MORE.7z"
          #          - name: SYMPHONIA
          #            fuzz_target: symphonia
          #            timeout: 14400
          #            files: "AA_MUSIC_VALID_FILES.7z"
          - name: ZIP_RS
            fuzz_target: zip_rs
            timeout: 14400
            files: "AA_ZIP_VALID_FILES.7z"

    steps:
      - uses: actions/checkout@v4

      - name: Setup rust version
        run: |
          rustup default nightly-2024-09-10
          rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
          rustup component add llvm-tools-preview --toolchain nightly-x86_64-unknown-linux-gnu

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y wget earlyoom libasan8
          sudo apt install -y pkg-config libfreetype6-dev libfontconfig1-dev # For font_kit

      - name: Install cargo fuzz
        run: cargo install cargo-fuzz

      - name: Restore cached data
        uses: actions/cache/restore@v4
        with:
          path: |
            /opt/INPUT_FILES_DIR
          key: ${{ matrix.name }}-cache

      - name: Download and prepare data files
        run: |
          CURR_DIR=$(pwd)
          mkdir -p /opt/INPUT_FILES_DIR || true
          cd /opt/INPUT_FILES_DIR
          
          if [ -z "$(ls -A /opt/INPUT_FILES_DIR)" ]; then
            python3 "$CURR_DIR/download_helper.py" "${{ matrix.files }}"
          fi          
          cd $CURR_DIR

      - name: Configure fuzzer
        run: |
          cd fuzz
          cargo update
          cd ../

      - name: Build Fuzzer
        run: |
          cd fuzz
          export RUST_BACKTRACE=1
          export ASAN_SYMBOLIZER_PATH=$(which llvm-symbolizer-18)
          export ASAN_OPTIONS=symbolize=1
          export RUSTFLAGS="-Zsanitizer=address"
          cargo fuzz build ${{ matrix.fuzz_target }} --release --features "${{ matrix.fuzz_target }}_f"
          cd ../

      - name: Run Fuzzer
        run: |
          export RUST_BACKTRACE=1
          export ASAN_SYMBOLIZER_PATH=$(which llvm-symbolizer-18)
          export ASAN_OPTIONS="symbolize=1:allocator_may_return_null=1"
          export RUSTFLAGS="-Zsanitizer=address"
          # Example
          # cargo fuzz build oxc --release --features "oxc_f"
          cargo fuzz run ${{ matrix.fuzz_target }} /opt/INPUT_FILES_DIR/ --release --features "${{ matrix.fuzz_target }}_f" -- -max_len=99999 -max_total_time=${{ matrix.timeout }} -rss_limit_mb=20000 || true

      - name: Remove slow files
        run: |
          find fuzz/artifacts/ -type f -name 'slow*' -exec rm {} +

      - name: Store fuzz results before minimization
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: broken___CARGO_FUZZ___${{ matrix.name }}
          path: fuzz/artifacts

      - name: Store fuzz corpus
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: corpus___CARGO_FUZZ___${{ matrix.name }}
          path: /opt/INPUT_FILES_DIR

      # TODO this not works due out-of-memory crash - strange that this not happens in command from above
      #      - name: Minimalize fuzz results
      #        run: |
      #          export RUST_BACKTRACE=1
      #          export ASAN_SYMBOLIZER_PATH=$(which llvm-symbolizer-18)
      #          export ASAN_OPTIONS="symbolize=1:allocator_may_return_null=1"
      #          export RUSTFLAGS="-Zsanitizer=address"
      #
      #          for file in fuzz/artifacts/*; do cargo fuzz tmin "${{ matrix.fuzz_target }}" "$file" --release --features "${{ matrix.fuzz_target }}_f" -- -rss_limit_mb=20000 || true; done

      #      - name: Store fuzz results after minimization
      #        uses: actions/upload-artifact@v4
      #        with:
      #          if-no-files-found: ignore
      #          name: CARGO_FUZZ___${{ matrix.name }}___after
      #          path: fuzz/artifacts

      - name: Save cache
        uses: actions/cache/save@v4
        with:
          path: |
            /opt/INPUT_FILES_DIR
          key: ${{ matrix.name }}-cache

      - name: Exit when found broken files
        run: |
          [ "$(ls -A fuzz/artifacts/${{ matrix.fuzz_target }})" ] && exit 1 || true
