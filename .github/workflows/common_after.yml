name: Common Step Before

on:
  workflow_call:
    inputs:
      files:
        description: 'Files to download'
        type: string
        required: true
      config-file:
        description: 'Config file to use'
        type: string
        required: true
      timeout:
        description: 'Timeout for fuzzer'
        type: number
        required: true
      tool-type:
        description: 'Type of tool'
        type: string
        required: true


jobs:
  common-steps:
    runs-on: ubuntu-24.04

    steps:
      - name: Build
        run: cargo build --release

      - name: Create folders
        run: |
          mkdir /opt/VALID_FILES_DIR
          mkdir /opt/POSSIBLY_BROKEN_FILES_DIR
          mkdir /opt/BROKEN_FILES_DIR

      - name: Download and prepare data files
        run: |
          CURR_DIR=$(pwd)
          cd /opt/VALID_FILES_DIR
          
          python3 "$CURR_DIR/download_helper.py" "${{ inputs.files }}"
          
          cd $CURR_DIR

      - name: Run app
        run: |
          mv ${{ inputs.config-file }} fuzz_settings.toml
          sd "TMP_FOLDER_TO_REPLACE" "/tmp/tmp_folder/data" fuzz_settings.toml
          target/release/automated_fuzzer ${{ inputs.timeout }} || true

      - name: Store results
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: FILES___${{ inputs.tool-type }}___${{ inputs.name }}___before
          path: /opt/BROKEN_FILES_DIR

      - name: Remove non crashing files
        run: |
          sd "remove_non_crashing_items_from_broken_files = false" "remove_non_crashing_items_from_broken_files = true" fuzz_settings.toml
          RUST_BACKTRACE=1 target/release/automated_fuzzer

      - name: Store Reports
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: REPORTS___${{ inputs.tool-type }}___${{ inputs.name }}
          path: /tmp/tmp_folder/data

      - name: Store results
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: FILES___${{ inputs.tool-type }}___${{ inputs.name }}___after
          path: /opt/BROKEN_FILES_DIR

      - name: Remove all folders
        run: |
          rm -rf /opt/VALID_FILES_DIR || true
          rm -rf /opt/POSSIBLY_BROKEN_FILES_DIR || true

      - name: Exit when found broken files
        run: |
          [ "$(ls -A /opt/BROKEN_FILES_DIR)" ] && exit 1 || true

