[general]
loop_number = 100 # How much creating/removing/checking steps will be executed
broken_files_for_each_file = 10# Number of broken files that will be created for each 1 valid file # Copy broken files to broken dir, disable if testing new settings
minimize_output = true # Tries to remove some lines from output file, remember, that not always minimized file will produce same error - usually minimize output 2-100 times
temp_possible_broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_BROKEN_INPUT_FILES" # Place where possibly broken files are saved
minimization_attempts = 200 # Attemps to minimize code, counter reset when found minimized test case
minimization_repeat = true # Repeat minimization process if smaller file was found
minimization_time = 1800
minimization_attempts_with_signal_timeout = 10 # Usually signal is sended by OOM killer or timeout which is slow to reproduce and minimize, so use it less amount than normal
debug_print_results = false # Debug prints output of commands
debug_executed_commands = false # Debug prints executed commands
debug_print_broken_files_creator = false # Debug prints results of command that created broken files
remove_non_crashing_items_from_broken_files = false # Special mode to remove non crashing files from broken files - useful if some of files were fixed in new version of app
check_for_stability = false # Check if output is stable - only able to set if stability_mode is not none
stability_runs = 3 # How many times output will be checked for stability
temp_folder = "/home/rafal/test/tmp_folder" # Temp file used to store random data
timeout = 100 # timeout time, if equal zero, then timeout is disabled - CAUTION - it is also used with grouping, which can a lot of easily exceed this time
allowed_error_statuses = "0,1,2,101" # Treat file as broken if exit code is different than 0 or 1 (this is sometimes )
max_file_size_limit = 5000000
error_when_found_signal = true # Errors, when app was killed by OS or user
max_collected_files = 999999999999999 # Max number of files that will be collected from valid_input_files_dir
ignore_file_if_contains_searched_items = true
check_if_file_is_parsable = false # If true, will check if file is parsable, if not, then will be removed
grouping = 100 # How many files will be grouped in one command - using bigger number than 1 will add additional step, with checking multiple files in one command
custom_folder_path = "/opt/CUSTOM" # Folder to which all broken things can be saved - it is ignored from other steps

current_mode = "custom" # custom or ruff

# app_binary - place where binary exists
# app_config - path to configuration
# extensions - list of extensions of tested files
# non_destructive_input_dir - folder which contains files to test, such files will not be overwriten
# valid_input_files_dir - place with valid files
# broken_files_dir - place where to save broken files

[custom]
name = "rawler"
command = "rawler|FILE_PATHS_TO_PROVIDE"

extensions = "dng,orf,nrw,rw2,raf,arw,cr2,cr3,crw,nef,pef,kdc,sr2,srf,x3f,erf,orf,raw,dcr,dng,tiff"
valid_input_files_dir = "/home/rafal/Downloads/GG"
broken_files_dir = "/opt/BROKEN_FILES_DIR"
group_mode = "none" # available: none, by_files, by_group

search_item_1 = "RUST_BACKTRACE"
search_item_2 = "panicked at"
search_item_100 = "AddressSanitizer"
search_item_101 = "LeakSanitizer"
search_item_102 = "ThreadSanitizer"
search_item_103 = "timeout: sending signal"
ignored_item_1 = "memory allocation of" # https://github.com/dnglab/dnglab/issues/570
ignored_item_2 = "requested allocation size" #  https://github.com/dnglab/dnglab/issues/570
ignored_item_3 = "out of memory" # https://github.com/dnglab/dnglab/issues/570
ignored_item_4 = "rawler/src/formats/tiff/ifd.rs" # https://github.com/dnglab/dnglab/issues/569
ignored_item_5 = "src/bits.rs" # https://github.com/dnglab/dnglab/issues/571
ignored_item_7 = "rawler/src/decoders/arw.rs" # https://github.com/dnglab/dnglab/issues/574
ignored_item_8 = "assertion failed: p1.y <= p2.y" # https://github.com/dnglab/dnglab/issues/573
ignored_item_9 = "p1.x <= p2.x" # https://github.com/dnglab/dnglab/issues/573
ignored_item_11 = "v4decompressor.rs" # https://github.com/dnglab/dnglab/issues/571
ignored_item_23 = "src/imgop/mod.rs" # https://github.com/dnglab/dnglab/issues/582
ignored_item_24 = "Lensdata version" # https://github.com/dnglab/dnglab/issues/583
ignored_item_25 = "Unknown CFA size" # https://github.com/dnglab/dnglab/issues/586
ignored_item_29 = "src/pumps.rs" # https://github.com/dnglab/dnglab/issues/587
ignored_item_26 = "attempt to multiply with overflow" # TODO
ignored_item_27 = "fuji_decompressor.rs" # TODO - generated files are too big, and cannot be really minimized
ignored_item_30 = "decompressors/crx/mod.rs" # TODO - generated files are too big, and cannot be really minimized
ignored_item_31 = "decompressors/ljpeg/mod.rs" # TODO - generated files are too big, and cannot be really minimized
ignored_item_32 = "decompressors/ljpeg/huffman.rs" # TODO - generated files are too big, and cannot be really minimized

file_type = "binary" # Available: text, binary, js, go, rust, lua, python, slint, jsvuesvelte, svg
stability_mode = "output_content" # Available "none", "console_output", "file_content", "output_content"



[custom2]
name = "symphonia"
command = "symphonia|FILE_PATHS_TO_PROVIDE"

extensions = "mp3,flac,wav,ogg,m4a,aac,aiff,pcm,aif,aiff,aifc,m3a,mp2,mp4a,mp2a,mpga,wave,weba,wma,oga"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_MUSIC_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/symphonia/Broken"
group_mode = "none" # available: none, by_files, by_group

search_item_1 = "RUST_BACKTRACE"
search_item_2 = "panicked at"
search_item_100 = "AddressSanitizer"
search_item_101 = "LeakSanitizer"
search_item_102 = "ThreadSanitizer"
search_item_103 = "timeout: sending signal"
file_type = "js" # Available: text, binary, js, go, rust, lua, python, slint, jsvuesvelte, svg
stability_mode = "file_content" # Available "none", "console_output", "file_content", "output_content"


[custom_oxc]
name = "oxc_linter"
command = "oxlint|-D|all|-D|nursery|--import-plugin|--jsdoc-plugin|--jest-plugin|--vitest-plugin|--jsx-a11y-plugin|--nextjs-plugin|--react-perf-plugin|FILE_PATHS_TO_PROVIDE|--fix"

extensions = "ts,js,mjs,mts"
valid_input_files_dir = "/home/rafal/Downloads"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/oxc_linter/Broken"
group_mode = "by_group" # available: none, by_files, by_group

search_item_1 = "RUST_BACKTRACE"
search_item_2 = "panicked at"
search_item_100 = "AddressSanitizer"
search_item_101 = "LeakSanitizer"
search_item_102 = "ThreadSanitizer"
search_item_103 = "timeout: sending signal"
file_type = "js" # Available: text, binary, js, go, rust, lua, python, slint, jsvuesvelte, svg
stability_mode = "file_content" # Available "none", "console_output", "file_content", "output_content"

[custom_lofty]
name = "lofty"
command = "lofty|FILE_PATHS_TO_PROVIDE"

extensions = "mp3,flac,wav,ogg,m4a,aac,aiff,pcm,aif,aiff,aifc,m3a,mp2,mp4a,mp2a,mpga,wave,weba,wma,oga"
valid_input_files_dir = "/home/rafal/Downloads"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/lofty/Broken"
group_mode = "none" # available: none, by_files, by_group

search_item_1 = "RUST_BACKTRACE"
search_item_2 = "panicked at"
search_item_100 = "AddressSanitizer"
search_item_101 = "LeakSanitizer"
search_item_102 = "ThreadSanitizer"
search_item_103 = "timeout: sending signal"
file_type = "binary" # Available: text, binary, js, go, rust, lua, python, slint, jsvuesvelte, svg
stability_mode = "output_content" # Available "none", "console_output", "file_content", "output_content"

[custom_typst]
name = "typst"
command = "typst|compile|FILE_PATHS_TO_PROVIDE"

extensions = "typ"
valid_input_files_dir = "/home/rafal/Downloads/B"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/typst/Broken"
group_mode = "none" # available: none, by_files, by_group

search_item_1 = "RUST_BACKTRACE"
search_item_2 = "panicked at"
search_item_100 = "AddressSanitizer"
search_item_101 = "LeakSanitizer"
search_item_102 = "ThreadSanitizer"
search_item_103 = "timeout: sending signal"
file_type = "text" # Available: text, binary, js, go, rust, lua, python, slint, jsvuesvelte, svg

[custom_image]
name = "image_rs"
command = "image|FILE_PATHS_TO_PROVIDE"

extensions = "jpg, jpeg, png, bmp, tiff, tif, tga, ff, jif, jfi, webp, gif, ico, exr, qoi"
#valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_IMAGE_VALID_FILES"
valid_input_files_dir = "/home/rafal/Downloads/AA"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/image/Broken"
group_mode = "none" # available: none, by_files, by_group

search_item_1 = "RUST_BACKTRACE"
search_item_2 = "panicked at"
ignored_item_3 = "zune-jpeg-0.4.11/src/mcu.rs:209:9"
ignored_item_34 = "src/codecs/tiff.rs:247:21"
ignored_item_35 = "src/compression/piz/huffman.rs"
file_type = "binary" # Available: text, binary, js, go, rust, lua, python, slint, jsvuesvelte, svg

[custom_zip]
name = "zip_rs"
command = "zip_rs|FILE_PATHS_TO_PROVIDE"

extensions = "zip"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_ZIP_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/zip/Broken"
group_mode = "by_group" # available: none, by_files, by_group

search_item_1 = "RUST_BACKTRACE"
search_item_2 = "panicked at"
file_type = "binary" # Available: text, binary, js, go, rust, lua, python, slint, jsvuesvelte, svg

[ruff]
name = "ruff"
app_binary = "ruff"
app_config = ""
extensions = "py"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_PYTHON_VALID_FILES"
#valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_PYTHON_VALID_FILES2"
#valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_PYTHON_VALID_FILES3"
#valid_input_files_dir = "/home/rafal/test/DOWNLOADED/py_files"
#valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/ruff/TO_MINIMIZE"
#valid_input_files_dir = "/home/rafal/test/tmp_folder"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/ruff/Broken"
tool_type = "lint_check_fix" # Available "format", "lint_check", "lint_check_fix"
additional_minimization_command = "python3 -m compileall {}"
stability_mode = "output_content" # Available "none", "console_output", "file_content", "output_content"

[rsbuzz]
app_binary = "rsbuzz"
app_config = ""
extensions = "ttf,otf,woff,woff2"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_FONT_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/rsbuzz/Broken"
tool_type = ""

[swc]
app_binary = "/home/rafal/Downloads/swc-linux-x64-gnu"
app_config = ""
extensions = "ts,js,mjs,mts"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_JAVASCRIPT_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/swc/Broken"
tool_type = ""

[custom_dicom]
name = "dicom_rs"
command = "dicom|FILE_PATHS_TO_PROVIDE"

extensions = "dcm"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_DICOM_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/dicom/Broken"
group_mode = "none" # available: none, by_files, by_group

search_item_1 = "RUST_BACKTRACE"
search_item_2 = "panicked at"
search_item_100 = "AddressSanitizer"
search_item_101 = "LeakSanitizer"
search_item_102 = "ThreadSanitizer"
search_item_103 = "timeout: sending signal"
search_item_200 = "DIFFERENT CONTENT"
file_type = "binary" # Available: text, binary, js, go, rust, lua, python, slint, jsvuesvelte, svg
stability_mode = "output_content" # Available "none", "console_output", "file_content", "output_content"

[pdfrs]
app_binary = "pdf"
app_config = ""
extensions = "pdf"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_PDF_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/pdfrs/Broken"
tool_type = ""

[quicklintjs]
app_binary = "quick-lint-js"
app_config = ""
extensions = "ts,js,mjs,mts"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_JAVASCRIPT_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/quicklint/Broken"
tool_type = ""

[staticcheckgo]
app_binary = "/home/rafal/Downloads/staticcheck/staticcheck"
app_config = ""
extensions = "go"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_GO_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/staticcheckgo/Broken"
tool_type = ""

[selene]
app_binary = "/home/rafal/test/selene/target/release/selene"
app_config = ""
extensions = "lua"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_LUA_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/selene/Broken"
tool_type = ""

[oxc]
app_binary = "oxlint"
app_config = ""
extensions = "ts,js,mjs,mts"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_JAVASCRIPT_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/oxc/Broken"
tool_type = "lint" # Available "lint", "check" # TODO

[mypy]
app_binary = "mypy"
app_config = ""
extensions = "py"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_PYTHON_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/mypy/Broken"
tool_type = ""


[biome]
app_binary = "biome"
app_config = ""
extensions = "ts,js,mjs,mts"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_JAVASCRIPT_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/biome/Broken"
tool_type = ""


