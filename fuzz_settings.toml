[general]
loop_number = 100 # How much creating/removing/checking steps will be executed
broken_files_for_each_file = 1# Number of broken files that will be created for each 1 valid file
copy_broken_files = true # Copy broken files to broken dir, disable if testing new settings
generate_files = true # If true will generate broken files and save them to temp_possible_broken_files_dir(this folder will be removed after each run), otherwise it will copy all valid files into BROKEN_FIELS_DIR
ignore_generate_copy_files_step = false # If true, will only use files inside temp_possible_broken_files_dir, without  copying new files or generating
minimize_output = true # Tries to remove some lines from output file, remember, that not always minimized file will produce same error - usually minimize output 2-100 times
temp_possible_broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_BROKEN_INPUT_FILES" # Place where possibly broken files are saved
minimization_attempts = 200 # Attemps to minimize code, counter reset when found minimized test case
minimization_attempts_with_signal_timeout = 10 # Usually signal is sended by OOM killer or timeout which is slow to reproduce and minimize, so use it less amount than normal
debug_print_results = false # Debug prints output of commands
debug_executed_commands = false # Debug prints executed commands
debug_print_broken_files_creator = false # Debug prints results of command that created broken files
remove_non_crashing_items_from_broken_files = false # Special mode to remove non crashing files from broken files - useful if some of files were fixed in new version of app
find_minimal_rules = true # If true, will try to find minimal rules that will produce error, files will be taken from BROKEN_FILES_DIR
verify_if_files_are_still_broken = false # If true, will verify if files are still broken, if not, then will be removed
clean_base_files = false # If true, files will be cleaned according to extension e.g. non parsable python files will be removed
temp_folder = "/home/rafal/test/tmp_folder" # Temp file used to store random data
timeout = 100 # timeout time, if equal zero, then timeout is disabled
allowed_error_statuses = "0,1,2,101" # Treat file as broken if exit code is different than 0 or 1 (this is sometimes )
ignore_timeout_errors = false
error_when_found_signal = true # Errors, when app was killed by OS or used
max_collected_files = 1000000000 # Max number of files that will be collected from valid_input_files_dir
check_if_file_is_parsable = false # If true, will check if file is parsable, if not, then will be removed
grouping = 100 # How many files will be grouped in one command - using bigger number than 1 will add additional step, with checking multiple files in one command

current_mode = "ruff"

# app_binary - place where binary exists
# app_config - path to configuration file
# extensions - list of extensions of tested files
# non_destructive_input_dir - folder which contains files to test, such files will not be overwriten
# valid_input_files_dir - place with valid files
# broken_files_dir - place where to save broken files
# binary_mode - used to minify output, if binary mode is on, then all minimization works on bytes, if is off, then minimization works on lines

[binary]
app_binary = "/home/rafal/Downloads/swc-linux-x64-gnu"
app_config = ""
extensions = "docx"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_JAVASCRIPT_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/swc/Broken"
tool_type = ""
binary_mode = false

[ruff]
app_binary = "ruff"
app_config = ""
extensions = "py"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_PYTHON_VALID_FILES"
#valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_PYTHON_VALID_FILES2"
#valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_PYTHON_VALID_FILES3"
#valid_input_files_dir = "/home/rafal/test/DOWNLOADED/py_files"
#valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/ruff/TO_MINIMIZE"
#valid_input_files_dir = "/home/rafal/test/tmp_folder"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/ruff/Broken"
tool_type = "lint_check_fix" # Available "format", "lint_check", "lint_check_fix"
binary_mode = false

[swc]
app_binary = "/home/rafal/Downloads/swc-linux-x64-gnu"
app_config = ""
extensions = "ts,js,mjs,mts"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_JAVASCRIPT_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/swc/Broken"
tool_type = ""
binary_mode = false

[zip]
app_binary = "/home/rafal/Projekty/Rust/run_command_for_every_file/src/crates/zip/target/release/zip"
app_config = ""
extensions = "zip"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_ZIP_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/zip/Broken"
tool_type = ""
binary_mode = false

[dicom]
app_binary = "/home/rafal/Projekty/Rust/run_command_for_every_file/src/crates/dicom/target/release/dicom"
app_config = ""
extensions = "dcm"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_DICOM_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/dicom/Broken"
tool_type = ""
binary_mode = false

[libcst]
app_binary = "/home/rafal/Projekty/Rust/run_command_for_every_file/src/crates/libcst/target/release/libcstt"
app_config = ""
extensions = "py"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_PYTHON_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/libcst/Broken"
tool_type = ""
binary_mode = false

[rustparser]
app_binary = "/home/rafal/Projekty/Rust/run_command_for_every_file/src/crates/rust_parser/target/release/rust_parser"
app_config = ""
extensions = "py"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_PYTHON_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/rust_parser/Broken"
tool_type = ""
binary_mode = false

[eslint]
app_binary = "/home/rafal/.nvm/versions/node/v19.1.0/bin/npx" # npx eslint
app_config = "/home/rafal/Desktop/RunEveryCommand/eslint/.eslintrc.yml"
extensions = "ts,js,mjs,mts"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_JAVASCRIPT_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/eslint/Broken"
tool_type = ""
binary_mode = false

[rustfmt]
app_binary = "rustfmt"
app_config = "/home/rafal/Projekty/Rust/Rozne/rustfmtt.toml"
extensions = "rs"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_RUST_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/rustfmt/Broken"
tool_type = ""
binary_mode = false

[pdfrs]
app_binary = "/home/rafal/Projekty/Rust/run_command_for_every_file/src/crates/pdf/target/release/pdf"
app_config = ""
extensions = "pdf"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_PDF_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/pdfrs/Broken"
tool_type = ""
binary_mode = true

[quicklintjs]
app_binary = "quick-lint-js"
app_config = ""
extensions = "ts,js,mjs,mts"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_JAVASCRIPT_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/quicklint/Broken"
tool_type = ""
binary_mode = false

[staticcheckgo]
app_binary = "/home/rafal/Downloads/staticcheck/staticcheck"
app_config = ""
extensions = "go"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_GO_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/staticcheckgo/Broken"
tool_type = ""
binary_mode = false

[selene]
app_binary = "/home/rafal/test/selene/target/release/selene"
app_config = ""
extensions = "lua"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_LUA_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/selene/Broken"
tool_type = ""
binary_mode = false

[oxc]
app_binary = "oxc_cli"
app_config = ""
extensions = "ts,js,mjs,mts"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_JAVASCRIPT_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/oxc/Broken"
tool_type = "lint" # Available "lint", "check" # TODO
binary_mode = false

[mypy]
app_binary = "mypy"
app_config = ""
extensions = "py"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_PYTHON_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/mypy/Broken"
tool_type = ""
binary_mode = false


[dlint]
app_binary = "/home/rafal/test/deno_lint/target/release/examples/dlint"
app_config = ""
extensions = "ts,js,mjs,mts"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_JAVASCRIPT_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/dlint/Broken"
tool_type = ""
binary_mode = false

[biome]
app_binary = "biome"
app_config = ""
extensions = "ts,js,mjs,mts"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_JAVASCRIPT_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/biome/Broken"
tool_type = ""
binary_mode = false

[image]
app_binary = "/home/rafal/Projekty/Rust/run_command_for_every_file/src/crates/image/target/release/image"
app_config = ""
extensions = "jpg, jpeg, png, bmp, tiff, tif, tga, ff, jif, jfi, webp, gif, ico, exr"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_IMAGE_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/image/Broken"
tool_type = ""
binary_mode = true

[lofty]
app_binary = "/home/rafal/Projekty/Rust/run_command_for_every_file/src/crates/lofty/target/release/lofty"
app_config = ""
extensions = "mp3,flac,wav,ogg,m4a,aac,aiff,pcm,aif,aiff,aifc,m3a,mp2,mp4a,mp2a,mpga,wave,weba,wma,oga"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_MUSIC_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/lofty/Broken"
tool_type = ""
binary_mode = true

[symphonia]
app_binary = "/home/rafal/Projekty/Rust/run_command_for_every_file/src/crates/symphonia/target/release/symphonia"
app_config = ""
extensions = "mp3,flac,wav,ogg,m4a,aac,aiff,pcm,aif,aiff,aifc,m3a,mp2,mp4a,mp2a,mpga,wave,weba,wma,oga"
valid_input_files_dir = "/home/rafal/Desktop/RunEveryCommand/AA_MUSIC_VALID_FILES"
broken_files_dir = "/home/rafal/Desktop/RunEveryCommand/symphonia/Broken"
tool_type = ""
binary_mode = true
