[general]
loop_number = 5000 # How much creating/removing/checking steps will be executed
broken_files_for_each_file = 1# Number of broken files that will be created for each 1 valid file
copy_broken_files = true
generate_files = false # If true will generate broken files and save them to BROKEN_FILES_DIR(this folder will be removed after each run)
ignore_generate_copy_files_step = true # If true, will only use files inside BROKEN_FILES_DIR, without  copying new files or generating
minimize_output = true # Tries to remove some lines from output file, remember, that not always minimized file will produce same error - usually minimize output 2-100 times
temp_possible_broken_files_dir = "/opt/POSSIBLY_BROKEN_FILES_DIR" # Place where possibly broken files are saved
minimization_attempts = 3000 # Attemps to minimize code, counter reset when found minimized test case
minimization_attempts_with_signal_timeout = 10 # Usually signal is sended by OOM killer or timeout which is slow to reproduce and minimize, so use it less amount than normal
debug_print_results = false # Debug prints output of commands
debug_executed_commands = false # Debug prints executed commands
debug_print_broken_files_creator = false # Debug prints results of command that created broken files
remove_non_crashing_items_from_broken_files = false # Special mode to remove non crashing files from broken files - useful if some of files were fixed in new version of app
find_minimal_rules = false # If true, will try to find minimal rules that will produce error, files will be taken from BROKEN_FILES_DIR
verify_if_files_are_still_broken = false # If true, will verify if files are still broken, if not, then will be removed
clean_base_files = false # If true, files will be cleaned according to extension e.g. non parsable python files will be removed
temp_folder = "TMP_FOLDER_TO_REPLACE" # Temp file used to store random data
timeout = 100 # timeout time, if equal zero, then timeout is disabled
allowed_error_statuses = "0,1,2,101" # Treat file as broken if exit code is different than 0 or 1 (this is sometimes )
ignore_timeout_errors = false
error_when_found_signal = true # Errors, when app was killed by OS or used
max_collected_files = 1000000000 # Max number of files that will be collected from valid_input_files_dir
check_if_file_is_parsable = false #true # If true, will check if file is parsable, if not, then will be removed
grouping = 10000 # How many files will be grouped in one command - using bigger number than 1 will add additional step, with checking multiple files in one command

current_mode = "ruff"

[ruff]
app_binary = "ruff"
app_config = ""
extensions = "py"
valid_input_files_dir = "/opt/VALID_FILES_DIR"
broken_files_dir = "/opt/BROKEN_FILES_DIR"
tool_type = "format"
binary_mode = false
